// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// NotificationsDao is the manager for logic model data accessing and custom defined data operations functions management.
type NotificationsDao struct {
	Table   string               // Table is the underlying table name of the DAO.
	Group   string               // Group is the database configuration group name of current DAO.
	Columns NotificationsColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// NotificationsColumns defines and stores column names for table notifications.
type NotificationsColumns struct {
	Id             string //
	Type           string //
	NotifiableType string //
	NotifiableId   string //
	Data           string //
	ReadAt         string //
	CreatedAt      string //
	UpdatedAt      string //
}

//  notificationsColumns holds the columns for table notifications.
var notificationsColumns = NotificationsColumns{
	Id:             "id",
	Type:           "type",
	NotifiableType: "notifiable_type",
	NotifiableId:   "notifiable_id",
	Data:           "data",
	ReadAt:         "read_at",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// NewNotificationsDao creates and returns a new DAO object for table data access.
func NewNotificationsDao() *NotificationsDao {
	return &NotificationsDao{
		Group:   "default",
		Table:   "notifications",
		Columns: notificationsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *NotificationsDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *NotificationsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *NotificationsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
